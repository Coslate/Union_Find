!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	./Makefile	/^CC = g++$/;"	m
CFLAGS	./Makefile	/^CFLAGS = -g -c -std=c++14 -O0 $(WARNINGS) -MMD -MP $(ASANFLAGS)$/;"	m
CLANG_EXCLUSIVE_WARNING_OPTIONS	./Makefile	/^CLANG_EXCLUSIVE_WARNING_OPTIONS =  # -Wno-unused-parameter -Wno-unused-variable$/;"	m
CTAGS_FILES	./Makefile	/^CTAGS_FILES = .\/include$/;"	m
CTAGS_FLAGS	./Makefile	/^CTAGS_FLAGS = $(foreach d, $(CTAGS_FILES),-a $d\/*)$/;"	m
CTAGS_UTIL	./Makefile	/^CTAGS_UTIL = $/;"	m
CleanAll	./Linked_List.cpp	/^void LinkedList::CleanAll(){$/;"	f	class:LinkedList
Delete	./Linked_List.cpp	/^void LinkedList::Delete(LinkedListNode* const deleted_node){$/;"	f	class:LinkedList
Delete	./Linked_List.cpp	/^void LinkedList::Delete(const int value){$/;"	f	class:LinkedList
EXCLUSIVE_WARNING_OPTIONS	./Makefile	/^EXCLUSIVE_WARNING_OPTIONS = $(CLANG_EXCLUSIVE_WARNING_OPTIONS)$/;"	m
EXCLUSIVE_WARNING_OPTIONS	./Makefile	/^EXCLUSIVE_WARNING_OPTIONS = $(GCC_EXCLUSIVE_WARNING_OPTIONS)$/;"	m
EXE	./Makefile	/^EXE := main$/;"	m
Find	./Union_Find.cpp	/^LinkedListNode* UnionFind::Find(LinkedListNode* const u_node){$/;"	f	class:UnionFind
FindIterative	./Union_Find.cpp	/^LinkedListNode* UnionFind::FindIterative(LinkedListNode* const u_node){$/;"	f	class:UnionFind
GCC_EXCLUSIVE_WARNING_OPTIONS	./Makefile	/^GCC_EXCLUSIVE_WARNING_OPTIONS =  # -Wno-unused-but-set-variable$/;"	m
GetAllData	./Linked_List.cpp	/^void LinkedList::GetAllData(int* const input_arr){$/;"	f	class:LinkedList
GetMaxRank	./include/Union_Find.h	/^        inline          int     GetMaxRank(){return max_rank;};$/;"	f	class:UnionFind
INCLUDE_FLAGS	./Makefile	/^INCLUDE_FLAGS = $(foreach d, $(INC_DIR), -I $d)$/;"	m
INC_DIR	./Makefile	/^INC_DIR := .\/include . ..\/Linked_List\/include\/$/;"	m
InsertArbitrary	./Linked_List.cpp	/^void LinkedList::InsertArbitrary(const int loc, LinkedListNode* const inserted_node){\/\/count from 0$/;"	f	class:LinkedList
InsertArbitrary	./Linked_List.cpp	/^void LinkedList::InsertArbitrary(const int loc, const int value){\/\/count from 0$/;"	f	class:LinkedList
InsertArbitrary	./Linked_List.cpp	/^void LinkedList::InsertArbitrary(const int loc, const int value, const std::string val_str){\/\/count from 0$/;"	f	class:LinkedList
InsertFront	./Linked_List.cpp	/^void LinkedList::InsertFront(LinkedListNode* const inserted_node){$/;"	f	class:LinkedList
InsertFront	./Linked_List.cpp	/^void LinkedList::InsertFront(const int value){$/;"	f	class:LinkedList
InsertFront	./Linked_List.cpp	/^void LinkedList::InsertFront(const int value, const std::string val_str){$/;"	f	class:LinkedList
InsertTail	./Linked_List.cpp	/^void LinkedList::InsertTail(LinkedListNode* const inserted_node){$/;"	f	class:LinkedList
InsertTail	./Linked_List.cpp	/^void LinkedList::InsertTail(const int value){$/;"	f	class:LinkedList
InsertTail	./Linked_List.cpp	/^void LinkedList::InsertTail(const int value, const std::string val_str){$/;"	f	class:LinkedList
Link	./Union_Find.cpp	/^void UnionFind::Link(LinkedListNode* const u_node, LinkedListNode* const v_node){$/;"	f	class:UnionFind
OBJS	./Makefile	/^OBJS := Linked_List.o Union_Find.o main.o$/;"	m
OBJS_DIR	./Makefile	/^OBJS_DIR := .objs$/;"	m
PrintList	./Linked_List.cpp	/^void LinkedList::PrintList(const bool debug_addr, const bool debug_name, const bool debug_key, const bool debug_explored){$/;"	f	class:LinkedList
PrintParent	./include/Union_Find.h	/^        inline          void    PrintParent(LinkedListNode* const u_node){std::cout<<"parent["<<u_node->GetName()<<"] = "<<parent[u_node]->GetName()<<std::endl;};$/;"	f	class:UnionFind
PrintRank	./include/Union_Find.h	/^        inline          void    PrintRank(LinkedListNode* const u_node){std::cout<<"rank["<<u_node->GetName()<<"] = "<<rank[u_node]<<std::endl;};$/;"	f	class:UnionFind
Reverse	./Linked_List.cpp	/^void LinkedList::Reverse(){$/;"	f	class:LinkedList
Union	./Union_Find.cpp	/^bool UnionFind::Union(LinkedListNode* const u_node, LinkedListNode* const v_node){$/;"	f	class:UnionFind
UnionFind	./include/Union_Find.h	/^        UnionFind(){max_rank = 1;};$/;"	f	class:UnionFind
UnionFind	./include/Union_Find.h	/^class UnionFind{$/;"	c
WARNINGS	./Makefile	/^WARNINGS = -pedantic -Wall $(WARNINGS_AS_ERRORS) -Wfatal-errors -Wextra $(EXCLUSIVE_WARNING_OPTIONS)$/;"	m
_UNION_FIND_H_	./include/Union_Find.h	/^#define _UNION_FIND_H_$/;"	d
main	./main.cpp	/^int main(){$/;"	f
max_rank	./include/Union_Find.h	/^    int max_rank;$/;"	m	class:UnionFind
parent	./include/Union_Find.h	/^    std::unordered_map<LinkedListNode*, LinkedListNode*> parent;$/;"	m	class:UnionFind
rank	./include/Union_Find.h	/^    std::unordered_map<LinkedListNode*, int> rank;$/;"	m	class:UnionFind
~LinkedList	./Linked_List.cpp	/^LinkedList::~LinkedList(){$/;"	f	class:LinkedList
~UnionFind	./Union_Find.cpp	/^UnionFind::~UnionFind(){$/;"	f	class:UnionFind
